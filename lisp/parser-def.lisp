(proclaim '(optimize (speed 0) (safety 3) (debug 3)))
(require 'buffalo)

(in-package #:agatha-lib)

(defun parse-prod (form)
  (let ((symbol (car form))
        (productions '()))
    (dolist (stuff (cdr form))
      (cond
        ((and (symbolp stuff) (not (null stuff)))
         (push (make-production symbol (list stuff)
                                :action #'identity)
               productions))
        ((listp stuff)
         (let* ((prec (when (eq :%prec (car stuff))
                        (unless (symbolp (second stuff))
                          (error "Malformed precedence production ~S" stuff))
                        (second stuff)))
                (stuff (if prec
                           (cddr stuff)
                           stuff))
                (l (car (last stuff))))
           (let ((rhs (if (symbolp l) stuff (butlast stuff)))
                 (action (if (symbolp l) #'list l)))
             (push (make-production symbol rhs :action action :prec prec)
                   productions))))
        (t (error "Unexpected production ~S" stuff))))
    productions))
